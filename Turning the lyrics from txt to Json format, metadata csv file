import json, csv, re
from pathlib import Path

ROOT = Path(r"F:\Official Clean Data of TS")   # <- your folder

def infer_year(album):
    m = re.search(r'(19|20)\d{2}', album)
    return int(m.group(0)) if m else None

def parse_title_and_track(fname):
    """
    Accepts: "01 - Title.txt", "01.Title.txt", "01 Title.txt", "Title.txt"
    Returns (trackNumber:int|None, songTitle:str)
    """
    name = Path(fname).stem
    m = re.match(r'^\s*(\d{1,3})\s*[-._]\s*(.+)$', name) or re.match(r'^\s*(\d{1,3})\s+(.+)$', name)
    if m:
        try:
            tn = int(m.group(1))
        except:
            tn = None
        return tn, m.group(2).strip()
    return None, name.strip()

def infer_collaborators_from_title(title):
    """
    Parses (feat. X, Y) / (featuring X & Y) into a comma-separated list.
    """
    m = re.search(r'\((?:feat\.?|featuring)\s+([^)]+)\)', title, flags=re.IGNORECASE)
    if not m:
        return ''
    parts = re.split(r',|&| x |×| and ', m.group(1), flags=re.IGNORECASE)
    seen = set(); out = []
    for p in (pp.strip(" .&'\"-") for pp in parts):
        if p and p.lower() not in seen:
            out.append(p); seen.add(p.lower())
    return ', '.join(out)

def main():
    if not ROOT.exists():
        raise SystemExit(f"Root folder not found: {ROOT}")

    outdir = Path("out")
    outdir.mkdir(parents=True, exist_ok=True)

    rows = []
    meta = []

    # iterate album subfolders
    for album_dir in sorted(p for p in ROOT.iterdir() if p.is_dir()):
        album = album_dir.name.strip()
        year = infer_year(album)

        for txt in sorted(album_dir.rglob("*.txt")):
            track_num, title = parse_title_and_track(txt.name)
            collaborators = infer_collaborators_from_title(title)

            lyrics = txt.read_text(encoding="utf-8", errors="ignore")

            # also provide a clean title without (feat...) for convenience
            title_clean = re.sub(r'\s*\((?:feat\.?|featuring)\s+[^)]+\)\s*', '', title, flags=re.IGNORECASE).strip()

            row = {
                "album": album,
                "year": year,
                "trackNumber": track_num,
                "songTitle": title_clean,
                "collaborators": collaborators,
                "lyrics": lyrics
            }
            rows.append(row)

            meta.append({
                "album": album,
                "year": year,
                "trackNumber": track_num,
                "songTitle": title_clean,
                "collaborators": collaborators,
                "path": str(txt.relative_to(ROOT))
            })

    # JSONL
    jsonl_path = outdir / "lyrics.jsonl"
    with jsonl_path.open("w", encoding="utf-8") as f:
        for r in rows:
            f.write(json.dumps(r, ensure_ascii=False) + "\n")

    # CSV (wide)
    csv_path = outdir / "lyrics.csv"
    with csv_path.open("w", encoding="utf-8", newline="") as f:
        w = csv.DictWriter(f, fieldnames=["album","year","trackNumber","songTitle","collaborators","lyrics"])
        w.writeheader(); w.writerows(rows)

    # metadata
    meta_path = outdir / "metadata.csv"
    with meta_path.open("w", encoding="utf-8", newline="") as f:
        w = csv.DictWriter(f, fieldnames=["album","year","trackNumber","songTitle","collaborators","path"])
        w.writeheader(); w.writerows(meta)

    print(f"✅ Wrote:\n  - {jsonl_path}\n  - {csv_path}\n  - {meta_path}\nTotal songs: {len(rows)}")

if __name__ == "__main__":
    main()
